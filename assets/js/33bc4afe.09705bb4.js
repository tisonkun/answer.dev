"use strict";(self.webpackChunkanswer=self.webpackChunkanswer||[]).push([[6902],{9613:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var i=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),u=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(t),g=a,c=d["".concat(p,".").concat(g)]||d[g]||m[g]||l;return t?i.createElement(c,r(r({ref:n},s),{},{components:t})):i.createElement(c,r({ref:n},s))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<l;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var i=t(4250),a=(t(9496),t(9613));const l={sidebar_label:"Plugin for UI",sidebar_position:2},r="Develop a UI plug-in",o={unversionedId:"development/extending/plugin_for_ui",id:"development/extending/plugin_for_ui",title:"Develop a UI plug-in",description:"A UI plugin is not so different from a standard plugin or React component, it just needs some configuration and wrapping.",source:"@site/docs/development/extending/plugin_for_ui.md",sourceDirName:"development/extending",slug:"/development/extending/plugin_for_ui",permalink:"/docs/development/extending/plugin_for_ui",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Plugin for UI",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Plugin Translation",permalink:"/docs/development/extending/plugin_translation"},next:{title:"Contributing",permalink:"/docs/development/contributing/"}},p={},u=[{value:"Development phase",id:"development-phase",level:2},{value:"Release phase",id:"release-phase",level:2},{value:"I18n for plug-ins",id:"i18n-for-plug-ins",level:2},{value:"Type definitions",id:"type-definitions",level:2},{value:"Example",id:"example",level:2}],s={toc:u};function m(e){let{components:n,...l}=e;return(0,a.kt)("wrapper",(0,i.Z)({},s,l,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"develop-a-ui-plug-in"},"Develop a UI plug-in"),(0,a.kt)("p",null,"A UI plugin is not so different from a ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/extending/"},"standard plugin")," or React component, it just needs some configuration and wrapping."),(0,a.kt)("p",null,"Having learned how to develop a standard plugin from the above documentation, and having understood React components. let's move on to a step-by-step guide to developing a ui plugin."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"development-phase"},"Development phase"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Go to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ui/src/plugins")," directory and create a React component, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Demo"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create the entry file ",(0,a.kt)("inlineCode",{parentName:"p"},"index.tsx")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"Demo")," component.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create the plugin information file ",(0,a.kt)("inlineCode",{parentName:"p"},"info.yaml")," next to the entry file. Commonly used fields are as follows"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# info.yaml\nslug_name: ui_plugin_demo\nversion: 0.0.1\nauthor:  Answer.dev\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Write any React component you need in the ",(0,a.kt)("inlineCode",{parentName:"li"},"index.tsx")," file and export it as follows")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// plugins/index.ts\nexport default {\n  info: pluginInfo,\n  component: memo(Index),\n};\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It must be exported in this way. ",(0,a.kt)("inlineCode",{parentName:"p"},"pluginInfo")," type definitions can be found in the ",(0,a.kt)("a",{parentName:"p",href:"#type-definitions"},"Type Definitions")," section below")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The file names must be ",(0,a.kt)("inlineCode",{parentName:"p"},"index.tsx")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"info.yaml"),", otherwise it will affect the use of the component.  ")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Export the plugins you have just defined in the plugins list file ",(0,a.kt)("inlineCode",{parentName:"li"},"plugins/index.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export { default as Demo } from './Demo';\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Now you can use the ",(0,a.kt)("inlineCode",{parentName:"li"},"PluginRender")," component to render the just-defined plugin where you want it!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<PluginRender slug_name="ui_plugin_demo" />\n')),(0,a.kt)("p",null,"With the above, if your plugin is functionally complete, you are ready to move on to the release phase."),(0,a.kt)("h2",{id:"release-phase"},"Release phase"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First, define the release registration file for the component. Using ",(0,a.kt)("inlineCode",{parentName:"li"},"Demo")," as an example, we write a ",(0,a.kt)("inlineCode",{parentName:"li"},"demo.go"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// demo.go\npackage demo\n\nimport "github.com/answerdev/answer/plugin"\n\ntype DemoPlugin struct {\n}\n\nfunc init() {\n    plugin.Register(&DemoPlugin{})\n}\n\nfunc (d DemoPlugin) Info() plugin.Info {\n    return plugin.Info{\n        Name:        plugin.MakeTranslator("i18n.demo.name"),\n        SlugName:    "demo_plugin",\n        Description: plugin.MakeTranslator("i18n.demo.description"),\n        Author:      "answerdev",\n        Version:     "0.0.1",\n    }\n}\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For detailed definitions, see the ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/extending/"},"Extension")," section.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Then, move the entire ",(0,a.kt)("inlineCode",{parentName:"li"},"Demo")," directory to the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/answerdev/plugins"},"official plugins repository")," and submit a PR request for merging, and you've released the plugin.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"i18n-for-plug-ins"},"I18n for plug-ins"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create an ",(0,a.kt)("inlineCode",{parentName:"li"},"i18n")," directory under the ",(0,a.kt)("inlineCode",{parentName:"li"},"Demo")," directory and add a language file in ",(0,a.kt)("inlineCode",{parentName:"li"},"yaml")," format, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"en_US.yaml"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"ui")," fields are fixed and must be used with these two names."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"ui_plugin_demo")," section is the ",(0,a.kt)("inlineCode",{parentName:"li"},"slug_name")," for the plugin, which is the value of the ",(0,a.kt)("inlineCode",{parentName:"li"},"slug_name")," field defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"info.yaml"),".")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# en_US.yaml\nplugin:\n  ui_plugin_demo:\n    ui:\n      msg: UI Plugin Demo\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create ",(0,a.kt)("inlineCode",{parentName:"li"},"index.ts")," in the ",(0,a.kt)("inlineCode",{parentName:"li"},"i18n")," directory and initialise the language resources with the ",(0,a.kt)("inlineCode",{parentName:"li"},"pluginKit")," tool.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import pluginKit from '@/utils/pluginKit';\n\nimport en_US from './en_US.yaml';\nimport zh_CN from './zh_CN.yaml';\n\npluginKit.initI18nResource({\n  en_US,\n  zh_CN,\n});\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Import the language resource file in the ",(0,a.kt)("inlineCode",{parentName:"li"},"index.tsx")," file of the plugin and initialise the ",(0,a.kt)("inlineCode",{parentName:"li"},"t")," function with the ",(0,a.kt)("inlineCode",{parentName:"li"},"pluginKit"),". Then you can use the ",(0,a.kt)("inlineCode",{parentName:"li"},"t")," function in the same way as a normal ",(0,a.kt)("inlineCode",{parentName:"li"},"t")," function.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import pluginKit, { PluginInfo } from '@/utils/pluginKit';\nimport './i18n';\n\nconst Index: FC = () => {\n  const { t } = useTranslation(pluginKit.getTransNs(), {\n    keyPrefix: pluginKit.getTransKeyPrefix(pluginInfo),\n  });\n\n  return <div>{t('msg')}</div>;\n};\n")),(0,a.kt)("p",null,"For details, please refer to the ",(0,a.kt)("a",{parentName:"p",href:"#example"},"example")," section"),(0,a.kt)("h2",{id:"type-definitions"},"Type definitions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export type PluginType = 'Connector';\n\nexport interface PluginInfo {\n  slug_name: string;\n  type?: PluginType;\n  name?: string;\n  description?: string;\n}\n\nexport interface Plugin {\n  info: PluginInfo;\n  component: NamedExoticComponent | FC;\n}\n\ninterface I18nResource {\n  [lng: string]: {\n    plugin: {\n      [slug_name: string]: {\n        ui: any;\n      };\n    };\n  };\n}\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"The final directory structure after the development of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Demo")," plugin is shown in the figure."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"ui-plugin-demo",src:t(6831).Z,width:"438",height:"246"})),(0,a.kt)("p",null,"You can also see the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/answerdev/answer/tree/main/ui/src/plugins/Demo"},"Demo sample code")," for more information."))}m.isMDXComponent=!0},6831:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ui-plugin-demo-3dd8c59b1a99fe0d3ef67edb82efd93f.jpeg"}}]);