"use strict";(self.webpackChunkanswer=self.webpackChunkanswer||[]).push([[3375],{9613:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var i=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=i.createContext({}),p=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=p(t),d=o,m=g["".concat(u,".").concat(d)]||g[d]||c[d]||r;return t?i.createElement(m,a(a({ref:n},s),{},{components:t})):i.createElement(m,a({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=g;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<r;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=t(4250),o=(t(9496),t(9613));const r={sidebar_label:"Plugin Translation",sidebar_position:1},a="Plugin Translation",l={unversionedId:"development/extending/plugin_translation",id:"development/extending/plugin_translation",title:"Plugin Translation",description:"How to make your plugin support multi-language?",source:"@site/docs/development/extending/plugin_translation.md",sourceDirName:"development/extending",slug:"/development/extending/plugin_translation",permalink:"/docs/development/extending/plugin_translation",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Plugin Translation",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Plugin Configuration Schema",permalink:"/docs/development/extending/plugin_config"},next:{title:"Plugin for UI",permalink:"/docs/development/extending/plugin_for_ui"}},u={},p=[{value:"How to make your plugin support multi-language?",id:"how-to-make-your-plugin-support-multi-language",level:2},{value:"Translator Structure",id:"translator-structure",level:2},{value:"Translation File",id:"translation-file",level:2},{value:"Backend Translation",id:"backend-translation",level:2}],s={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"plugin-translation"},"Plugin Translation"),(0,o.kt)("h2",{id:"how-to-make-your-plugin-support-multi-language"},"How to make your plugin support multi-language?"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Since answer supports multiple languages, the plugin also needs to support multiple languages.\nThe following is an example of how to make your plugin support multiple languages.")),(0,o.kt)("h2",{id:"translator-structure"},"Translator Structure"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In some plugins interface, you can see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Translator")," structure, which is used to support multiple languages.")),(0,o.kt)("p",null,"For example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigField")," structure has a ",(0,o.kt)("inlineCode",{parentName:"p"},"Title")," field of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Translator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ConfigField struct {\n    Name        string               `json:"name"`\n    Type        ConfigType           `json:"type"`\n    Title       Translator           `json:"title"`\n    Description Translator           `json:"description"`\n    Required    bool                 `json:"required"`\n    Value       string               `json:"value"`\n    UIOptions   ConfigFieldUIOptions `json:"ui_options"`\n    Options     []ConfigFieldOption  `json:"options,omitempty"`\n}\n')),(0,o.kt)("p",null,"It's easy to build a ",(0,o.kt)("inlineCode",{parentName:"p"},"Translator")," structure, just like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/answerdev/answer/plugin"\n)\n\nplugin.MakeTranslator("plugin.github_connector.backend.name")\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin.github_connector.backend.name")," is the key of the translation file, which will be introduced later."),(0,o.kt)("p",null,"So, the first step is build a ",(0,o.kt)("inlineCode",{parentName:"p"},"Translator")," structure for each field that needs to be translated."),(0,o.kt)("h2",{id:"translation-file"},"Translation File"),(0,o.kt)("p",null,"Make directory ",(0,o.kt)("inlineCode",{parentName:"p"},"i18n")," in the root directory of your plugin, and then create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"en_US.yaml")," in it."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"en_US.yaml")," file is used to store the English translation of the plugin."),(0,o.kt)("p",null,"The content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"en_US.yaml")," file is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"plugin:\n  github_connector:\n    backend:\n      name:\n        other: GitHub\n      info:\n        name:\n          other: GitHub Connector\n        description:\n          other: Connect to GitHub for third-party login\n      config:\n        client_id:\n          title:\n            other: ClientID\n          description:\n            other: Client ID of your GitHub application\n        client_secret:\n          title:\n            other: ClientSecret\n          description:\n            other: Client secret of your GitHub application\n    ui:\n      login:\n        title: Login with GitHub\n        description: Login with GitHub\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"plugin")," is the root key of the translation file."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"github_connector")," is the name of the plugin."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"backend")," is translation for the backend. The end of key like ",(0,o.kt)("inlineCode",{parentName:"li"},"other")," is just for ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/nicksnyder/go-i18n"},"go-i18n")," to recognize the translation file. "),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"ui")," is translation for the frontend.")),(0,o.kt)("p",null,"You can use the key like ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin.github_connector.backend.name")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin.github_connector.ui.login.title")," for translation."),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"i18n.go")," file in the root directory of your plugin, and then add the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package i18n\n\nconst (\n    ConnectorName                 = "plugin.github_connector.backend.name"\n    InfoName                      = "plugin.github_connector.backend.info.name"\n    InfoDescription               = "plugin.github_connector.backend.info.description"\n    ConfigClientIDTitle           = "plugin.github_connector.backend.config.client_id.title"\n    ConfigClientIDDescription     = "plugin.github_connector.backend.config.client_id.description"\n    ConfigClientSecretTitle       = "plugin.github_connector.backend.config.client_secret.title"\n    ConfigClientSecretDescription = "plugin.github_connector.backend.config.client_secret.description"\n)\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"i18n.go")," file is used to store the key of the translation file."),(0,o.kt)("p",null,"Finally, the directory structure of the plugin is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 github.go\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u2514\u2500\u2500 i18n\n    \u251c\u2500\u2500 en_US.yaml\n    \u251c\u2500\u2500 translation.go\n    \u2514\u2500\u2500 zh_CN.yaml\n")),(0,o.kt)("h2",{id:"backend-translation"},"Backend Translation"),(0,o.kt)("p",null,"You just need to return ",(0,o.kt)("inlineCode",{parentName:"p"},"Translator")," structure with the key of the translation file. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (g *GitHubConnector) ConnectorName() plugin.Translator {\n  return plugin.MakeTranslator(i18n.ConnectorName)\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Answer")," will automatically translate the key of the translation file into the corresponding language."))}c.isMDXComponent=!0}}]);